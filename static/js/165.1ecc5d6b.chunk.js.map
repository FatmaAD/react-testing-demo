{"version":3,"file":"static/js/165.1ecc5d6b.chunk.js","mappings":"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","sources":["actions/index.ts","components/nav.tsx","actions/recipe/index.ts","views/recipe/index.tsx"],"sourcesContent":["import axios from \"axios\";\n\nexport function http <T>(method: 'GET'|'POST', url: string, params?: any): Promise<T | any>  {\n    const options = {\n    method: method,\n    url: url,\n    params: params,\n    headers: {\n      'X-RapidAPI-Host': 'tasty.p.rapidapi.com',\n      'X-RapidAPI-Key': 'da5f72566fmshae28595683c0adap1c5609jsn070d55f2d1cf'\n    }\n  }\n  return axios.request<T>(options);\n};\n","\nimport React from 'react';\nimport {Box} from '@mui/material';\nimport Logo from './../tasty-logo.png'\nexport default function NavBar () {\n    return<Box mb={5} width=\"100vw\" height={55} style={{background: '#ebc919'}}>\n        <img width={170} src={Logo} alt=\"logo\" />\n    </Box>\n}","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { http } from \"..\";\n\nexport interface Recipe {\n    instructions: Array<{\n        display_text: string;\n        end_time: number;\n        id: number;\n        position: number;\n        start_time: number;\n    }>;\n    cook_time_minutes: number;\n    original_video_url?: string;\n    video_url?: string;\n    thumbnail_alt_text?: string;\n    thumbnail_url?: string;\n    name: string;\n    nutrition: {\n        calories: number;\n        carbohydrates: number;\n        fat: number;\n        fiber: number;\n        protein: number;\n        sugar: number;\n    }\n}\n\nconst useRecipeDetails = () => {\n    const { recipeName } = useParams<'recipeName'>();\n    const [isLoading, seIsLoading] = useState(true);\n    const [recipe, setRecipe] = useState<Recipe>();\n\n    const getRecipe = useCallback(() => {\n        if (!recipeName) {\n            return\n        }\n        // seIsLoading(true);\n        const res = http('GET', 'https://tasty.p.rapidapi.com/recipes/get-more-info', { id: recipeName })\n        res.then(data => {\n            setRecipe(data.data);\n        }).catch(()=>{\n            new Error('failed to load recipe')\n        }).finally(() => {\n            seIsLoading(false);\n        })\n    }, [recipeName]);\n\n    useEffect(() => {\n        getRecipe();\n    }, [getRecipe])\n\n    return {\n        getRecipe,\n        isLoading,\n        recipe\n    }\n}\n\nexport default useRecipeDetails;\n","import { CircularProgress, Box, Typography } from '@mui/material';\nimport React, { Fragment, useEffect } from 'react';\nimport useRecipeDetails from '../../actions/recipe';\nimport Nav from '../../components/nav'\n\nexport default function Recipe() {\n    const { isLoading, recipe } = useRecipeDetails();\n\n    return <Box >\n        <Nav />\n        {isLoading && <CircularProgress role=\"progressbar\" />}\n        {!isLoading && !recipe && <Box width=\"100%\" height=\"100vh\" display=\"flex\" justifyContent=\"center\" >\n            <Typography color=\"secondary\" variant=\"h3\">Sorry, No data to display</Typography>\n        </Box>}\n        {recipe && <Box mx={1} mt={2} display=\"flex\" flexWrap=\"nowrap\" flexDirection=\"row\" alignItems=\"start\" justifyContent=\"start\">\n            <Box width='33.3%'>\n                <Typography variant=\"h5\">Nutrition Info</Typography>\n                <Box display=\"flex\" flexWrap=\"nowrap\" flexDirection=\"row\">\n                    <Box width=\"49%\" display=\"flex\" flexWrap=\"wrap\">\n                        {Object.keys(recipe.nutrition).map(key => <Typography key={key} style={{ width: '100%' }} component=\"div\" variant=\"subtitle1\">{key} </Typography>)}\n                    </Box>\n                    <Box width=\"48%\" display=\"flex\" flexWrap=\"wrap\">\n                        {Object.values(recipe.nutrition).map(value => <Typography key={value} lineHeight={1.75} style={{ width: '100%' }} component=\"div\" variant=\"subtitle2\">{value}</Typography>)}\n                    </Box>\n                </Box>\n            </Box>\n\n            <Box width='33.3%'>\n                <Typography variant=\"h5\">Preparation</Typography>\n                <Box mr={2} style={{\n                    height: 280,\n                    overflow: 'auto',\n                }}\n                    display=\"flex\" flexWrap=\"wrap\" flexDirection=\"column\">\n                    <Box display=\"flex\" flexWrap=\"wrap\">\n                        {recipe.instructions.sort(ing => ing.position).map(instruc => <Fragment key={instruc.id}>\n                            <Typography mb={2} variant=\"subtitle1\">\n                                <span style={{ color: \"#a5a5a5\", fontWeight: 'bold', marginRight: 10 }}>\n                                    {instruc.position}\n                                </span>\n                                {instruc.display_text}\n                            </Typography>\n                        </Fragment>\n                        )}\n                    </Box>\n\n                </Box>\n            </Box>\n\n            <Box width='33.3%'>\n                {recipe.original_video_url && (\n                    <video data-testid='recipe-video' title={recipe.name} width=\"100%\" src={recipe.original_video_url || recipe?.video_url} controls />\n                )}\n\n                {!recipe?.video_url && recipe?.thumbnail_url && (\n                    <img\n                        data-testid='recipe-img'\n                        style={{\n                            backgroundSize: 'cover',\n                            width: '-webkit-fill-available'\n                        }} src={recipe?.thumbnail_url} alt={recipe?.thumbnail_alt_text}\n                    />)}\n            </Box>\n        </Box>}\n    </Box>\n\n}"],"names":["http","method","url","params","options","headers","axios","NavBar","mb","width","height","style","background","src","Logo","alt","recipeName","useParams","useState","isLoading","seIsLoading","recipe","setRecipe","getRecipe","useCallback","id","then","data","catch","Error","finally","useEffect","Recipe","useRecipeDetails","Box","CircularProgress","role","display","justifyContent","Typography","color","variant","mx","mt","flexWrap","flexDirection","alignItems","Object","keys","nutrition","map","key","component","values","value","lineHeight","mr","overflow","instructions","sort","ing","position","instruc","Fragment","fontWeight","marginRight","display_text","original_video_url","title","name","video_url","controls","thumbnail_url","backgroundSize","thumbnail_alt_text"],"sourceRoot":""}