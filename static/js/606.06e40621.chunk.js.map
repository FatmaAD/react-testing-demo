{"version":3,"file":"static/js/606.06e40621.chunk.js","mappings":"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","sources":["actions/index.ts","components/nav.tsx","components/searchbar.tsx","components/recipe.tsx","actions/landing/search.ts","views/landing.tsx","actions/landing/recipe.ts"],"sourcesContent":["import axios from \"axios\";\n\nexport function http <T>(method: 'GET'|'POST', url: string, params?: any): Promise<T | any>  {\n    const options = {\n    method: method,\n    url: url,\n    params: params,\n    headers: {\n      'X-RapidAPI-Host': 'tasty.p.rapidapi.com',\n      'X-RapidAPI-Key': 'da5f72566fmshae28595683c0adap1c5609jsn070d55f2d1cf'\n    }\n  }\n  return axios.request<T>(options);\n};\n","\nimport React from 'react';\nimport {Box} from '@mui/material';\nimport Logo from './../tasty-logo.png'\nexport default function NavBar () {\n    return<Box mb={5} width=\"100vw\" height={55} style={{background: '#ebc919'}}>\n        <img width={170} src={Logo} alt=\"logo\" />\n    </Box>\n}","import React from 'react';\nimport { Autocomplete, Box, Button, TextField } from '@mui/material';\n\ninterface Props {\n  recipesOptions: string[];\n  getSimilarFeed: (value: string) => void;\n  autocompleteRecipe: (value: string) => void;\n}\n\nexport default function SearchBar(props: Props) {\n\n  const { recipesOptions, getSimilarFeed, autocompleteRecipe } = props;\n\n  return <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n    <Autocomplete\n      fullWidth\n      autoComplete={false}\n      options={recipesOptions}\n      onChange={(event: any, value: any) => {\n        getSimilarFeed(value);   \n      }}\n      onInputChange={(event: any, value: any) => {\n        if (value) {\n          autocompleteRecipe(value);\n        }\n\n      }}\n      renderInput={params => (\n        <TextField {...params} />\n      )}\n    />\n  </Box>\n}","import React from 'react';\nimport { Card, CardActionArea, CardContent, CardMedia, LinearProgress, Paper, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { Feed } from '../actions/landing/recipe';\n\ninterface Props {\n    isLoading: boolean;\n    feeds: Feed[];\n}\n\nexport default function Recipe(props: Props) {\n    const { isLoading, feeds, } = props;\n    console.log('Recipe feeds', isLoading, feeds);\n\n    return <Box width=\"100vw\">\n        {isLoading && <LinearProgress  />}\n        {!isLoading && feeds.length === 0 && <Box style={{ border: '1px solid #ccc' }}>\n            <Typography>no result found</Typography>\n        </Box>}\n        {!isLoading && feeds.length > 0 && <Box\n            marginY={3}\n            display=\"flex\"\n            flexDirection=\"row\"\n            alignItems=\"center\"\n            flexWrap=\"wrap\"\n            justifyContent=\"flex-start\">\n            {feeds.map(feed => (\n                <Box\n                    m={3}\n                    display=\"flex\"\n                    data-testid='recipe'\n                    key={feed.item.id}\n                >\n                    <Card sx={{ maxWidth: 345, height: '370px' }} onClick={()=>{window.location.assign(`/${feed.item.id}`)}}>\n                        <CardActionArea>\n                            <CardMedia\n                                component=\"img\"\n                                height=\"140\"\n                                image={feed.item.thumbnail_url}\n                                alt={feed.item.thumbnail_alt_text}\n                            />\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                                    {feed.item.name}\n                                </Typography>\n                                <Typography style={{\n                                    overflow: 'hidden',\n                                    textOverflow: 'ellipsis',\n                                }}\n                                    variant=\"body2\"\n                                    color=\"text.secondary\"\n                                >\n                                    {feed.item.description}\n                                </Typography>\n                            </CardContent>\n                        </CardActionArea>\n                    </Card>\n                </Box>\n\n            ))}\n        </Box>\n\n        }\n    </Box>\n}","import { useState } from \"react\";\nimport { http } from \"..\";\n\ninterface RecipeOptions {\n    \"display\": string\n    \"search_value\": string\n    \"type\": string\n}\n\nconst useSearch = () => {\n    const [recipesOptions, setRecipesOptions] = useState<string[]>([]);\n\n    function autocompleteRecipe(recipeName: string) {\n        const res = http<Array<RecipeOptions>>('GET', 'https://tasty.p.rapidapi.com/recipes/auto-complete', { prefix: recipeName });\n        res.then((data: any) => {\n            const options = data.data.results.length > 0 ? data.data.results.map((o: RecipeOptions) => o.display) : []\n\n            setRecipesOptions(options);\n        });\n    }\n\n    return { recipesOptions, autocompleteRecipe }\n}\n\nexport default useSearch;\n","import React from 'react';\nimport { Box } from '@mui/material';\nimport SearchBar from '../components/searchbar';\nimport Recipe from '../components/recipe';\nimport Nav from '../components/nav';\nimport useSearch from '../actions/landing/search';\nimport useRecipe from '../actions/landing/recipe';\n\nexport default function HomePage() {\n    const { recipesOptions, autocompleteRecipe } = useSearch();\n    const { getSimilarFeed, feeds, isLoading } = useRecipe();\n\n    return (<Box height=\"100vh\">\n        <Nav />\n        <SearchBar \n            getSimilarFeed={getSimilarFeed}\n            recipesOptions={recipesOptions}\n            autocompleteRecipe={autocompleteRecipe} \n        />\n        <Recipe feeds={feeds} isLoading={isLoading} />\n    </Box>)\n}","import { useState } from \"react\";\nimport { http } from \"..\";\n\nexport interface Feed {\n    item: {\n        country?: string;\n        description?: string;\n        id: number;\n        name: string;\n        original_video_url?: string;\n        thumbnail_alt_text?: string;\n        thumbnail_url: string;\n        tips_and_ratings_enabled?: boolean;\n        topics?: any[];\n        user_ratings?: { count_positive: number, score: number, count_negative: number };\n        video_id?: number;\n        video_url?: string;\n    };\n    type: \"featured\" | \"item\" | \"shoppable_carousel\" | \"carousel\";\n}\n\nexport default function useRecipe() {\n    const [feeds, setFeeds] = useState<Feed[]>([]);\n    const [isLoading, seIsLoading] = useState(false);\n\n    const getSimilarFeed = (searchWord?: string) => {\n        seIsLoading(true);\n        const res = http('GET', 'https://tasty.p.rapidapi.com/feeds/list', { size: '5', vegetarian: 'false', from: '5', search_terms: searchWord,  })\n        res.then(data => {\n            const similarities = data.data.results?.filter((f: Feed) => f.type === 'item')\n            if (similarities.length > 0) {\n               setFeeds(similarities);\n            };\n\n        }).finally(() => {\n            seIsLoading(false);\n        })\n    }\n    \n\n    return { getSimilarFeed, feeds, isLoading }\n}"],"names":["http","method","url","params","options","headers","axios","NavBar","mb","width","height","style","background","src","Logo","alt","SearchBar","props","recipesOptions","getSimilarFeed","autocompleteRecipe","Box","display","flexDirection","alignItems","justifyContent","Autocomplete","fullWidth","autoComplete","onChange","event","value","onInputChange","renderInput","TextField","Recipe","isLoading","feeds","console","log","LinearProgress","length","border","Typography","marginY","flexWrap","map","feed","m","Card","sx","maxWidth","onClick","window","location","assign","item","id","CardActionArea","CardMedia","component","image","thumbnail_url","thumbnail_alt_text","CardContent","gutterBottom","variant","name","overflow","textOverflow","color","description","useState","setRecipesOptions","recipeName","prefix","then","data","results","o","HomePage","useSearch","setFeeds","seIsLoading","searchWord","size","vegetarian","from","search_terms","similarities","filter","f","type","finally","useRecipe"],"sourceRoot":""}